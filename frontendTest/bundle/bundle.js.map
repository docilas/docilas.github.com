{"version":3,"sources":["webpack:///bundle.js","webpack:///webpack/bootstrap 00e391844221a0d756a6","webpack:///./components/app/index.js","webpack:///./components/navbar/index.js","webpack:///./~/dom4/build/dom4.max.js","webpack:///./~/domready/ready.js","webpack:///./~/svgxuse/svgxuse.js","webpack:///./components/sec_pricing/index.js","webpack:///./~/hammerjs/hammer.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","_interopRequireDefault","obj","default","_domready","_domready2","_navbar","_sec_pricing","menuBtn","document","querySelector","menuItem","querySelectorAll","addEventListener","menuSwitch","forEach","item","menuScroll","pricePlan","onDrag","onDrop","onPan","hasClass","element","cls","className","indexOf","event","html","classList","remove","add","outMenuClick","window","createDocumentFragment","createElement","nodeName","enoughArguments","length","Error","mutationMacro","nodes","textNodeIfString","fragment","list","slice","appendChild","node","createTextNode","head","TemporaryPrototype","TemporaryTokenList","wrapVerifyToken","hOP","descriptor","__defineGetter__","__defineSetter__","set","this","verifyToken","token","spaces","test","DOMTokenList","noClassName","getAttribute","isSVG","baseVal","replace","trim","properties","push","apply","split","_isSVG","_","classListDescriptor","uid","concat","Math","random","Date","SPACE","CLASS_LIST","toggle","force","contains","undefined","DocumentFragmentPrototype","DocumentFragment","Node","NodePrototype","Element","CharacterData","CharacterDataPrototype","DocumentType","DocumentTypePrototype","ElementPrototype","HTMLElement","HTMLSelectElement","constructor","selectRemove","ShadowRoot","SVGElement","idSpaceFinder","idSpaceReplacer","createQueryMethod","methodName","createArray","css","a","id","query","nl","selectors","parentNode","join","setAttribute","removeAttribute","Array","addQueryAndAll","where","queryAll","matchesSelector","webkitMatchesSelector","khtmlMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","selector","matches","firstChild","arguments","insertBefore","nextSibling","replaceWith","replaceChild","removeChild","o_O","j","splice","toString","documentElement","original","el","getElementsByTagName","raf","rAF","requestAnimationFrame","cAF","cancelAnimationFrame","prefixes","callback","goOn","setTimeout","clearTimeout","CustomEvent","eventName","defaultInitDict","type","eventInitDict","createEvent","initCustomEvent","bubbles","cancelable","detail","initEvent","Event","$Event","init","out","KeyboardEvent","$KeyboardEvent","getModifier","keys","withDefaults","target","source","key","withInitValues","defaults","args","eventType","ctrlKey","shiftKey","altKey","metaKey","altGraphKey","modifiers","initType","String","chr","char","location","keyCode","charCodeAt","charCode","repeat","locale","view","which","initKeyEvent","initKeyboardEvent","navigator","language","e","keyIdentifier","keyLocation","MouseEvent","$MouseEvent","initMouseEvent","screenX","screenY","clientX","clientY","button","relatedTarget","global","Dict","createEventListener","options","eventListener","once","currentTarget","removeEventListener","removed","passive","preventDefault","handleEvent","capture","DOMMap","WeakMap","dispatch","ce","shouldDrop","drop","dispatched","dispatchEvent","Handler","counter","__ce__","delete","v","has","create","augment","dE","aEL","rEL","increment","getListenerKey","createAEL","handler","tmp","wrap","info","dm","createREL","Constructor","proto","EventTarget","Text","HTMLDocument","Window","XMLHttpRequest","self","definition","listener","fns","doc","hack","doScroll","domContentLoaded","loaded","readyState","shift","fn","checkUseElems","tid","cache","debouncedCheck","unobserveChanges","observeChanges","observer","MutationObserver","observe","childList","subtree","attributes","disconnect","ignore","createRequest","url","getOrigin","loc","protocol","href","host","Request","origin","origin2","withCredentials","XDomainRequest","xlinkNS","observeIfDone","inProgressCount","attrUpdateFunc","spec","base","useEl","setAttributeNS","hash","onloadFunc","xhr","svg","body","x","onload","innerHTML","responseText","style","position","width","height","overflow","onErrorTimeout","onerror","ontimeout","bcr","isHidden","uses","fallback","getBoundingClientRect","getAttributeNS","left","right","top","bottom","getElementById","open","send","abort","winLoad","getPlanRange","total","currentStyle","getComputedStyle","offsetWidth","margin","parseFloat","marginLeft","marginRight","area","getNextX","now","move","next","range","hammertime","_hammerjs2","nowX","on","ev","deltaX","tar","transform","_hammerjs","console","log","__WEBPACK_AMD_DEFINE_RESULT__","exportName","setTimeoutContext","timeout","context","bindFn","invokeArrayArg","arg","isArray","each","iterator","deprecate","method","message","deprecationMessage","stack","warn","inherit","child","childP","baseP","_super","assign","boolOrFn","val","TYPE_FUNCTION","ifUndefined","val1","val2","addEventListeners","types","splitStr","removeEventListeners","hasParent","parent","inStr","str","find","inArray","src","findByKey","toArray","uniqueArray","sort","results","values","b","prefixed","prefix","prop","camelProp","toUpperCase","VENDOR_PREFIXES","uniqueId","_uniqueId","getWindowForElement","ownerDocument","defaultView","parentWindow","Input","manager","inputTarget","domHandler","enable","createInputInstance","Type","inputClass","SUPPORT_POINTER_EVENTS","PointerEventInput","SUPPORT_ONLY_TOUCH","TouchInput","SUPPORT_TOUCH","TouchMouseInput","MouseInput","inputHandler","input","pointersLen","pointers","changedPointersLen","changedPointers","isFirst","INPUT_START","isFinal","INPUT_END","INPUT_CANCEL","session","computeInputData","emit","recognize","prevInput","pointersLength","firstInput","simpleCloneInputData","firstMultiple","offsetCenter","center","getCenter","timeStamp","deltaTime","angle","getAngle","distance","getDistance","computeDeltaXY","offsetDirection","getDirection","deltaY","overallVelocity","getVelocity","overallVelocityX","overallVelocityY","y","abs","scale","getScale","rotation","getRotation","maxPointers","computeIntervalInputData","srcEvent","offset","offsetDelta","prevDelta","velocity","velocityX","velocityY","direction","last","lastInterval","COMPUTE_INTERVAL","round","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","p1","p2","props","PROPS_XY","sqrt","atan2","PI","start","end","PROPS_CLIENT_XY","evEl","MOUSE_ELEMENT_EVENTS","evWin","MOUSE_WINDOW_EVENTS","pressed","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","store","pointerEvents","SingleTouchInput","evTarget","SINGLE_TOUCH_TARGET_EVENTS","SINGLE_TOUCH_WINDOW_EVENTS","started","normalizeSingleTouches","all","touches","changed","changedTouches","TOUCH_TARGET_EVENTS","targetIds","getTouches","allTouches","INPUT_MOVE","identifier","targetTouches","changedTargetTouches","filter","touch","mouse","primaryTouch","lastTouches","recordTouches","eventData","setLastTouch","lastTouch","lts","removeLastTouch","DEDUP_TIMEOUT","isSyntheticEvent","t","dx","dy","DEDUP_DISTANCE","TouchAction","cleanTouchActions","actions","TOUCH_ACTION_NONE","hasPanX","TOUCH_ACTION_PAN_X","hasPanY","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_AUTO","getTouchActionProps","NATIVE_TOUCH_ACTION","touchMap","cssSupports","CSS","supports","Recognizer","state","STATE_POSSIBLE","simultaneous","requireFail","stateStr","STATE_CANCELLED","STATE_ENDED","STATE_CHANGED","STATE_BEGAN","directionStr","getRecognizerByNameIfManager","otherRecognizer","recognizer","AttrRecognizer","PanRecognizer","pX","pY","PinchRecognizer","PressRecognizer","_timer","_input","RotateRecognizer","SwipeRecognizer","TapRecognizer","pTime","pCenter","count","Hammer","recognizers","preset","Manager","handlers","oldCssProps","touchAction","toggleCssProps","recognizeWith","requireFailure","cssProps","triggerDomEvent","data","gestureEvent","gesture","TEST_ELEMENT","TypeError","output","index","nextKey","extend","dest","merge","MOBILE_REGEX","userAgent","INPUT_TYPE_TOUCH","INPUT_TYPE_PEN","INPUT_TYPE_MOUSE","INPUT_TYPE_KINECT","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","DIRECTION_ALL","destroy","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","pointerType","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM","2","3","4","5","MSPointerEvent","PointerEvent","removePointer","eventTypeNormalized","toLowerCase","isTouch","storeIndex","pointerId","SINGLE_TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","TOUCH_INPUT_MAP","inputEvent","inputData","isMouse","sourceCapabilities","firesTouchEvents","PREFIXED_TOUCH_ACTION","TOUCH_ACTION_COMPUTE","TOUCH_ACTION_MAP","compute","update","getTouchAction","preventDefaults","prevented","hasNone","isTapPointer","isTapMovement","isTapTouchTime","preventSrc","STATE_RECOGNIZED","STATE_FAILED","dropRecognizeWith","dropRequireFailure","hasRequireFailures","canRecognizeWith","additionalEvent","tryEmit","canEmit","inputDataClone","process","reset","attrTest","optionPointers","isRecognized","isValid","threshold","directionTest","hasMoved","inOut","time","validPointers","validMovement","validTime","taps","interval","posThreshold","validTouchTime","failTimeout","validInterval","validMultiTap","tapCount","VERSION","domEvents","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","STOP","FORCED_STOP","stop","stopped","curRecognizer","existing","events","off","Tap","Pan","Swipe","Pinch","Rotate","Press","freeGlobal"],"mappings":"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","file":"bundle.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 6);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n__webpack_require__(3);\n\n__webpack_require__(5);\n\nvar _domready = __webpack_require__(4);\n\nvar _domready2 = _interopRequireDefault(_domready);\n\nvar _navbar = __webpack_require__(2);\n\nvar _sec_pricing = __webpack_require__(11);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _domready2.default)(function () {\n\tvar menuBtn = document.querySelector('.menu_switch');\n\tvar menuItem = document.querySelectorAll('nav a');\n\n\tmenuBtn.addEventListener('click', _navbar.menuSwitch);\n\tmenuItem.forEach(function (item) {\n\t\titem.addEventListener('click', _navbar.menuScroll);\n\t});\n\n\t//bind Pan event for Price plan\n\tvar pricePlan = document.querySelector('#pricing .wrapper');\n\tpricePlan.addEventListener('mousedown', _sec_pricing.onDrag);\n\tpricePlan.addEventListener('mouseup', _sec_pricing.onDrop);\n\t(0, _sec_pricing.onPan)();\n});\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nexports.menuSwitch = menuSwitch;\nexports.menuScroll = menuScroll;\nexports.outMenuClick = outMenuClick;\nvar html = document.querySelector(\"html\");\n\nfunction hasClass(element, cls) {\n  return (' ' + element.className + ' ').indexOf(' ' + cls + ' ') > -1;\n}\n\nfunction menuSwitch(event) {\n  hasClass(html, 'menu_open') ? html.classList.remove(\"menu_open\") : html.classList.add(\"menu_open\");\n}\n\nfunction menuScroll(event) {\n  menuSwitch();\n  // try to add smooth scroll event\n}\nfunction outMenuClick(event) {\n  menuSwitch();\n}\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n/*!\nCopyright (C) 2013-2015 by Andrea Giammarchi - @WebReflection\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n(function(window){'use strict';\n  /* jshint loopfunc: true, noempty: false*/\n  // http://www.w3.org/TR/dom/#element\n\n  function createDocumentFragment() {\n    return document.createDocumentFragment();\n  }\n\n  function createElement(nodeName) {\n    return document.createElement(nodeName);\n  }\n\n  function enoughArguments(length, name) {\n    if (!length) throw new Error(\n      'Failed to construct ' +\n        name +\n      ': 1 argument required, but only 0 present.'\n    );\n  }\n\n  function mutationMacro(nodes) {\n    if (nodes.length === 1) {\n      return textNodeIfString(nodes[0]);\n    }\n    for (var\n      fragment = createDocumentFragment(),\n      list = slice.call(nodes),\n      i = 0; i < nodes.length; i++\n    ) {\n      fragment.appendChild(textNodeIfString(list[i]));\n    }\n    return fragment;\n  }\n\n  function textNodeIfString(node) {\n    return typeof node === 'string' ? document.createTextNode(node) : node;\n  }\n\n  for(var\n    head,\n    property,\n    TemporaryPrototype,\n    TemporaryTokenList,\n    wrapVerifyToken,\n    document = window.document,\n    hOP = Object.prototype.hasOwnProperty,\n    defineProperty = Object.defineProperty || function (object, property, descriptor) {\n      if (hOP.call(descriptor, 'value')) {\n        object[property] = descriptor.value;\n      } else {\n        if (hOP.call(descriptor, 'get'))\n          object.__defineGetter__(property, descriptor.get);\n        if (hOP.call(descriptor, 'set'))\n          object.__defineSetter__(property, descriptor.set);\n      }\n      return object;\n    },\n    indexOf = [].indexOf || function indexOf(value){\n      var length = this.length;\n      while(length--) {\n        if (this[length] === value) {\n          break;\n        }\n      }\n      return length;\n    },\n    // http://www.w3.org/TR/domcore/#domtokenlist\n    verifyToken = function (token) {\n      if (!token) {\n        throw 'SyntaxError';\n      } else if (spaces.test(token)) {\n        throw 'InvalidCharacterError';\n      }\n      return token;\n    },\n    DOMTokenList = function (node) {\n      var\n        noClassName = typeof node.className === 'undefined',\n        className = noClassName ?\n          (node.getAttribute('class') || '') : node.className,\n        isSVG = noClassName || typeof className === 'object',\n        value = (isSVG ?\n          (noClassName ? className : className.baseVal) :\n          className\n        ).replace(trim, '')\n      ;\n      if (value.length) {\n        properties.push.apply(\n          this,\n          value.split(spaces)\n        );\n      }\n      this._isSVG = isSVG;\n      this._ = node;\n    },\n    classListDescriptor = {\n      get: function get() {\n        return new DOMTokenList(this);\n      },\n      set: function(){}\n    },\n    uid = 'dom4-tmp-'.concat(Math.random() * +new Date()).replace('.','-'),\n    trim = /^\\s+|\\s+$/g,\n    spaces = /\\s+/,\n    SPACE = '\\x20',\n    CLASS_LIST = 'classList',\n    toggle = function toggle(token, force) {\n      if (this.contains(token)) {\n        if (!force) {\n          // force is not true (either false or omitted)\n          this.remove(token);\n        }\n      } else if(force === undefined || force) {\n        force = true;\n        this.add(token);\n      }\n      return !!force;\n    },\n    DocumentFragmentPrototype = window.DocumentFragment && DocumentFragment.prototype,\n    Node = window.Node,\n    NodePrototype = (Node || Element).prototype,\n    CharacterData = window.CharacterData || Node,\n    CharacterDataPrototype = CharacterData && CharacterData.prototype,\n    DocumentType = window.DocumentType,\n    DocumentTypePrototype = DocumentType && DocumentType.prototype,\n    ElementPrototype = (window.Element || Node || window.HTMLElement).prototype,\n    HTMLSelectElement = window.HTMLSelectElement || createElement('select').constructor,\n    selectRemove = HTMLSelectElement.prototype.remove,\n    ShadowRoot = window.ShadowRoot,\n    SVGElement = window.SVGElement,\n    // normalizes multiple ids as CSS query\n    idSpaceFinder = / /g,\n    idSpaceReplacer = '\\\\ ',\n    createQueryMethod = function (methodName) {\n      var createArray = methodName === 'querySelectorAll';\n      return function (css) {\n        var a, i, id, query, nl, selectors, node = this.parentNode;\n        if (node) {\n          for (\n            id = this.getAttribute('id') || uid,\n            query = id === uid ? id : id.replace(idSpaceFinder, idSpaceReplacer),\n            selectors = css.split(','),\n            i = 0; i < selectors.length; i++\n          ) {\n            selectors[i] = '#' + query + ' ' + selectors[i];\n          }\n          css = selectors.join(',');\n        }\n        if (id === uid) this.setAttribute('id', id);\n        nl = (node || this)[methodName](css);\n        if (id === uid) this.removeAttribute('id');\n        // return a list\n        if (createArray) {\n          i = nl.length;\n          a = new Array(i);\n          while (i--) a[i] = nl[i];\n        }\n        // return node or null\n        else {\n          a = nl;\n        }\n        return a;\n      };\n    },\n    addQueryAndAll = function (where) {\n      if (!('query' in where)) {\n        where.query = ElementPrototype.query;\n      }\n      if (!('queryAll' in where)) {\n        where.queryAll = ElementPrototype.queryAll;\n      }\n    },\n    properties = [\n      'matches', (\n        ElementPrototype.matchesSelector ||\n        ElementPrototype.webkitMatchesSelector ||\n        ElementPrototype.khtmlMatchesSelector ||\n        ElementPrototype.mozMatchesSelector ||\n        ElementPrototype.msMatchesSelector ||\n        ElementPrototype.oMatchesSelector ||\n        function matches(selector) {\n          var parentNode = this.parentNode;\n          return !!parentNode && -1 < indexOf.call(\n            parentNode.querySelectorAll(selector),\n            this\n          );\n        }\n      ),\n      'closest', function closest(selector) {\n        var parentNode = this, matches;\n        while (\n          // document has no .matches\n          (matches = parentNode && parentNode.matches) &&\n          !parentNode.matches(selector)\n        ) {\n          parentNode = parentNode.parentNode;\n        }\n        return matches ? parentNode : null;\n      },\n      'prepend', function prepend() {\n        var firstChild = this.firstChild,\n            node = mutationMacro(arguments);\n        if (firstChild) {\n          this.insertBefore(node, firstChild);\n        } else {\n          this.appendChild(node);\n        }\n      },\n      'append', function append() {\n        this.appendChild(mutationMacro(arguments));\n      },\n      'before', function before() {\n        var parentNode = this.parentNode;\n        if (parentNode) {\n          parentNode.insertBefore(\n            mutationMacro(arguments), this\n          );\n        }\n      },\n      'after', function after() {\n        var parentNode = this.parentNode,\n            nextSibling = this.nextSibling,\n            node = mutationMacro(arguments);\n        if (parentNode) {\n          if (nextSibling) {\n            parentNode.insertBefore(node, nextSibling);\n          } else {\n            parentNode.appendChild(node);\n          }\n        }\n      },\n      // WARNING - DEPRECATED - use .replaceWith() instead\n      'replace', function replace() {\n        this.replaceWith.apply(this, arguments);\n      },\n      'replaceWith', function replaceWith() {\n        var parentNode = this.parentNode;\n        if (parentNode) {\n          parentNode.replaceChild(\n            mutationMacro(arguments),\n            this\n          );\n        }\n      },\n      'remove', function remove() {\n        var parentNode = this.parentNode;\n        if (parentNode) {\n          parentNode.removeChild(this);\n        }\n      },\n      'query', createQueryMethod('querySelector'),\n      'queryAll', createQueryMethod('querySelectorAll')\n    ],\n    slice = properties.slice,\n    i = properties.length; i; i -= 2\n  ) {\n    property = properties[i - 2];\n    if (!(property in ElementPrototype)) {\n      ElementPrototype[property] = properties[i - 1];\n    }\n    if (property === 'remove') {\n      // see https://github.com/WebReflection/dom4/issues/19\n      HTMLSelectElement.prototype[property] = function () {\n        return 0 < arguments.length ?\n          selectRemove.apply(this, arguments) :\n          ElementPrototype.remove.call(this);\n      };\n    }\n    // see https://github.com/WebReflection/dom4/issues/18\n    if (/^(?:before|after|replace|replaceWith|remove)$/.test(property)) {\n      if (CharacterData && !(property in CharacterDataPrototype)) {\n        CharacterDataPrototype[property] = properties[i - 1];\n      }\n      if (DocumentType && !(property in DocumentTypePrototype)) {\n        DocumentTypePrototype[property] = properties[i - 1];\n      }\n    }\n    // see https://github.com/WebReflection/dom4/pull/26\n    if (/^(?:append|prepend)$/.test(property)) {\n      if (DocumentFragmentPrototype) {\n        if (!(property in DocumentFragmentPrototype)) {\n          DocumentFragmentPrototype[property] = properties[i - 1];\n        }\n      } else {\n        try {\n          createDocumentFragment().constructor.prototype[property] = properties[i - 1];\n        } catch(o_O) {}\n      }\n    }\n  }\n\n  // bring query and queryAll to the document too\n  addQueryAndAll(document);\n\n  // brings query and queryAll to fragments as well\n  if (DocumentFragmentPrototype) {\n    addQueryAndAll(DocumentFragmentPrototype);\n  } else {\n    try {\n      addQueryAndAll(createDocumentFragment().constructor.prototype);\n    } catch(o_O) {}\n  }\n\n  // bring query and queryAll to the ShadowRoot too\n  if (ShadowRoot) {\n    addQueryAndAll(ShadowRoot.prototype);\n  }\n\n  // most likely an IE9 only issue\n  // see https://github.com/WebReflection/dom4/issues/6\n  if (!createElement('a').matches('a')) {\n    ElementPrototype[property] = function(matches){\n      return function (selector) {\n        return matches.call(\n          this.parentNode ?\n            this :\n            createDocumentFragment().appendChild(this),\n          selector\n        );\n      };\n    }(ElementPrototype[property]);\n  }\n\n  // used to fix both old webkit and SVG\n  DOMTokenList.prototype = {\n    length: 0,\n    add: function add() {\n      for(var j = 0, token; j < arguments.length; j++) {\n        token = arguments[j];\n        if(!this.contains(token)) {\n          properties.push.call(this, property);\n        }\n      }\n      if (this._isSVG) {\n        this._.setAttribute('class', '' + this);\n      } else {\n        this._.className = '' + this;\n      }\n    },\n    contains: (function(indexOf){\n      return function contains(token) {\n        i = indexOf.call(this, property = verifyToken(token));\n        return -1 < i;\n      };\n    }([].indexOf || function (token) {\n      i = this.length;\n      while(i-- && this[i] !== token){}\n      return i;\n    })),\n    item: function item(i) {\n      return this[i] || null;\n    },\n    remove: function remove() {\n      for(var j = 0, token; j < arguments.length; j++) {\n        token = arguments[j];\n        if(this.contains(token)) {\n          properties.splice.call(this, i, 1);\n        }\n      }\n      if (this._isSVG) {\n        this._.setAttribute('class', '' + this);\n      } else {\n        this._.className = '' + this;\n      }\n    },\n    toggle: toggle,\n    toString: function toString() {\n      return properties.join.call(this, SPACE);\n    }\n  };\n\n  if (SVGElement && !(CLASS_LIST in SVGElement.prototype)) {\n    defineProperty(SVGElement.prototype, CLASS_LIST, classListDescriptor);\n  }\n\n  // http://www.w3.org/TR/dom/#domtokenlist\n  // iOS 5.1 has completely screwed this property\n  // classList in ElementPrototype is false\n  // but it's actually there as getter\n  if (!(CLASS_LIST in document.documentElement)) {\n    defineProperty(ElementPrototype, CLASS_LIST, classListDescriptor);\n  } else {\n    // iOS 5.1 and Nokia ASHA do not support multiple add or remove\n    // trying to detect and fix that in here\n    TemporaryTokenList = createElement('div')[CLASS_LIST];\n    TemporaryTokenList.add('a', 'b', 'a');\n    if ('a\\x20b' != TemporaryTokenList) {\n      // no other way to reach original methods in iOS 5.1\n      TemporaryPrototype = TemporaryTokenList.constructor.prototype;\n      if (!('add' in TemporaryPrototype)) {\n        // ASHA double fails in here\n        TemporaryPrototype = window.TemporaryTokenList.prototype;\n      }\n      wrapVerifyToken = function (original) {\n        return function () {\n          var i = 0;\n          while (i < arguments.length) {\n            original.call(this, arguments[i++]);\n          }\n        };\n      };\n      TemporaryPrototype.add = wrapVerifyToken(TemporaryPrototype.add);\n      TemporaryPrototype.remove = wrapVerifyToken(TemporaryPrototype.remove);\n      // toggle is broken too ^_^ ... let's fix it\n      TemporaryPrototype.toggle = toggle;\n    }\n  }\n\n  if (!('contains' in NodePrototype)) {\n    defineProperty(NodePrototype, 'contains', {\n      value: function (el) {\n        while (el && el !== this) el = el.parentNode;\n        return this === el;\n      }\n    });\n  }\n\n  if (!('head' in document)) {\n    defineProperty(document, 'head', {\n      get: function () {\n        return head || (\n          head = document.getElementsByTagName('head')[0]\n        );\n      }\n    });\n  }\n\n  // requestAnimationFrame partial polyfill\n  (function () {\n    for (var\n      raf,\n      rAF = window.requestAnimationFrame,\n      cAF = window.cancelAnimationFrame,\n      prefixes = ['o', 'ms', 'moz', 'webkit'],\n      i = prefixes.length;\n      !cAF && i--;\n    ) {\n      rAF = rAF || window[prefixes[i] + 'RequestAnimationFrame'];\n      cAF = window[prefixes[i] + 'CancelAnimationFrame'] ||\n            window[prefixes[i] + 'CancelRequestAnimationFrame'];\n    }\n    if (!cAF) {\n      // some FF apparently implemented rAF but no cAF \n      if (rAF) {\n        raf = rAF;\n        rAF = function (callback) {\n          var goOn = true;\n          raf(function () {\n            if (goOn) callback.apply(this, arguments);\n          });\n          return function () {\n            goOn = false;\n          };\n        };\n        cAF = function (id) {\n          id();\n        };\n      } else {\n        rAF = function (callback) {\n          return setTimeout(callback, 15, 15);\n        };\n        cAF = function (id) {\n          clearTimeout(id);\n        };\n      }\n    }\n    window.requestAnimationFrame = rAF;\n    window.cancelAnimationFrame = cAF;\n  }());\n\n  // http://www.w3.org/TR/dom/#customevent\n  try{new window.CustomEvent('?');}catch(o_O){\n    window.CustomEvent = function(\n      eventName,\n      defaultInitDict\n    ){\n\n      // the infamous substitute\n      function CustomEvent(type, eventInitDict) {\n        /*jshint eqnull:true */\n        var event = document.createEvent(eventName);\n        if (typeof type != 'string') {\n          throw new Error('An event name must be provided');\n        }\n        if (eventName == 'Event') {\n          event.initCustomEvent = initCustomEvent;\n        }\n        if (eventInitDict == null) {\n          eventInitDict = defaultInitDict;\n        }\n        event.initCustomEvent(\n          type,\n          eventInitDict.bubbles,\n          eventInitDict.cancelable,\n          eventInitDict.detail\n        );\n        return event;\n      }\n\n      // attached at runtime\n      function initCustomEvent(\n        type, bubbles, cancelable, detail\n      ) {\n        /*jshint validthis:true*/\n        this.initEvent(type, bubbles, cancelable);\n        this.detail = detail;\n      }\n\n      // that's it\n      return CustomEvent;\n    }(\n      // is this IE9 or IE10 ?\n      // where CustomEvent is there\n      // but not usable as construtor ?\n      window.CustomEvent ?\n        // use the CustomEvent interface in such case\n        'CustomEvent' : 'Event',\n        // otherwise the common compatible one\n      {\n        bubbles: false,\n        cancelable: false,\n        detail: null\n      }\n    );\n  }\n\n  // window.Event as constructor\n  try { new Event('_'); } catch (o_O) {\n    /* jshint -W022 */\n    o_O = (function ($Event) {\n      function Event(type, init) {\n        enoughArguments(arguments.length, 'Event');\n        var out = document.createEvent('Event');\n        if (!init) init = {};\n        out.initEvent(\n          type,\n          !!init.bubbles,\n          !!init.cancelable\n        );\n        return out;\n      }\n      Event.prototype = $Event.prototype;\n      return Event;\n    }(window.Event || function Event() {}));\n    defineProperty(window, 'Event', {value: o_O});\n    // Android 4 gotcha\n    if (Event !== o_O) Event = o_O;\n  }\n\n  // window.KeyboardEvent as constructor\n  try { new KeyboardEvent('_', {}); } catch (o_O) {\n    /* jshint -W022 */\n    o_O = (function ($KeyboardEvent) {\n      // code inspired by https://gist.github.com/termi/4654819\n      var\n        initType = 0,\n        defaults = {\n          char: '',\n          key: '',\n          location: 0,\n          ctrlKey: false,\n          shiftKey: false,\n          altKey: false,\n          metaKey: false,\n          altGraphKey: false,\n          repeat: false,\n          locale: navigator.language,\n          detail: 0,\n          bubbles: false,\n          cancelable: false,\n          keyCode: 0,\n          charCode: 0,\n          which: 0\n        },\n        eventType\n      ;\n      try {\n        var e = document.createEvent('KeyboardEvent');\n        e.initKeyboardEvent(\n          'keyup', false, false, window, '+', 3,\n          true, false, true, false, false\n        );\n        initType = (\n          (e.keyIdentifier || e.key) == '+' &&\n          (e.keyLocation || e.location) == 3\n        ) && (\n          e.ctrlKey ? e.altKey ? 1 : 3 : e.shiftKey ? 2 : 4\n        ) || 9;\n      } catch(o_O) {}\n      eventType = 0 < initType ? 'KeyboardEvent' : 'Event';\n\n      function getModifier(init) {\n        for (var\n          out = [],\n          keys = [\n            'ctrlKey',\n            'Control',\n            'shiftKey',\n            'Shift',\n            'altKey',\n            'Alt',\n            'metaKey',\n            'Meta',\n            'altGraphKey',\n            'AltGraph'\n          ],\n          i = 0; i < keys.length; i += 2\n        ) {\n          if (init[keys[i]])\n            out.push(keys[i + 1]);\n        }\n        return out.join(' ');\n      }\n\n      function withDefaults(target, source) {\n        for (var key in source) {\n          if (\n            source.hasOwnProperty(key) &&\n            !source.hasOwnProperty.call(target, key)\n          ) target[key] = source[key];\n        }\n        return target;\n      }\n\n      function withInitValues(key, out, init) {\n        try {\n          out[key] = init[key];\n        } catch(o_O) {}\n      }\n\n      function KeyboardEvent(type, init) {\n        enoughArguments(arguments.length, 'KeyboardEvent');\n        init = withDefaults(init || {}, defaults);\n        var\n          out = document.createEvent(eventType),\n          ctrlKey = init.ctrlKey,\n          shiftKey = init.shiftKey,\n          altKey = init.altKey,\n          metaKey = init.metaKey,\n          altGraphKey = init.altGraphKey,\n          modifiers = initType > 3 ? getModifier(init) : null,\n          key = String(init.key),\n          chr = String(init.char),\n          location = init.location,\n          keyCode = init.keyCode || (\n            (init.keyCode = key) &&\n            key.charCodeAt(0)\n          ) || 0,\n          charCode = init.charCode || (\n            (init.charCode = chr) &&\n            chr.charCodeAt(0)\n          ) || 0,\n          bubbles = init.bubbles,\n          cancelable = init.cancelable,\n          repeat = init.repeat,\n          locale = init.locale,\n          view = init.view || window,\n          args\n        ;\n        if (!init.which) init.which = init.keyCode;\n        if ('initKeyEvent' in out) {\n          out.initKeyEvent(\n            type, bubbles, cancelable, view,\n            ctrlKey, altKey, shiftKey, metaKey, keyCode, charCode\n          );\n        } else if (0 < initType && 'initKeyboardEvent' in out) {\n          args = [type, bubbles, cancelable, view];\n          switch (initType) {\n            case 1:\n              args.push(key, location, ctrlKey, shiftKey, altKey, metaKey, altGraphKey);\n              break;\n            case 2:\n              args.push(ctrlKey, altKey, shiftKey, metaKey, keyCode, charCode);\n              break;\n            case 3:\n              args.push(key, location, ctrlKey, altKey, shiftKey, metaKey, altGraphKey);\n              break;\n            case 4:\n              args.push(key, location, modifiers, repeat, locale);\n              break;\n            default:\n              args.push(char, key, location, modifiers, repeat, locale);\n          }\n          out.initKeyboardEvent.apply(out, args);\n        } else {\n          out.initEvent(type, bubbles, cancelable);\n        }\n        for (key in out) {\n          if (defaults.hasOwnProperty(key) && out[key] !== init[key]) {\n            withInitValues(key, out, init);\n          }\n        }\n        return out;\n      }\n      KeyboardEvent.prototype = $KeyboardEvent.prototype;\n      return KeyboardEvent;\n    }(window.KeyboardEvent || function KeyboardEvent() {}));\n    defineProperty(window, 'KeyboardEvent', {value: o_O});\n    // Android 4 gotcha\n    if (KeyboardEvent !== o_O) KeyboardEvent = o_O;\n  }\n\n  // window.MouseEvent as constructor\n  try { new MouseEvent('_', {}); } catch (o_O) {\n    /* jshint -W022 */\n    o_O = (function ($MouseEvent) {\n      function MouseEvent(type, init) {\n        enoughArguments(arguments.length, 'MouseEvent');\n        var out = document.createEvent('MouseEvent');\n        if (!init) init = {};\n        out.initMouseEvent(\n          type,\n          !!init.bubbles,\n          !!init.cancelable,\n          init.view || window,\n          init.detail || 1,\n          init.screenX || 0,\n          init.screenY || 0,\n          init.clientX || 0,\n          init.clientY || 0,\n          !!init.ctrlKey,\n          !!init.altKey,\n          !!init.shiftKey,\n          !!init.metaKey,\n          init.button || 0,\n          init.relatedTarget || null\n        );\n        return out;\n      }\n      MouseEvent.prototype = $MouseEvent.prototype;\n      return MouseEvent;\n    }(window.MouseEvent || function MouseEvent() {}));\n    defineProperty(window, 'MouseEvent', {value: o_O});\n    // Android 4 gotcha\n    if (MouseEvent !== o_O) MouseEvent = o_O;\n  }\n\n}(window));(function (global){'use strict';\n\n  // a WeakMap fallback for DOM nodes only used as key\n  var DOMMap = global.WeakMap || (function () {\n\n    var\n      counter = 0,\n      dispatched = false,\n      drop = false,\n      value\n    ;\n\n    function dispatch(key, ce, shouldDrop) {\n      drop = shouldDrop;\n      dispatched = false;\n      value = undefined;\n      key.dispatchEvent(ce);\n    }\n\n    function Handler(value) {\n      this.value = value;\n    }\n\n    Handler.prototype.handleEvent = function handleEvent(e) {\n      dispatched = true;\n      if (drop) {\n        e.currentTarget.removeEventListener(e.type, this, false);\n      } else {\n        value = this.value;\n      }\n    };\n\n    function DOMMap() {\n      counter++;  // make id clashing highly improbable\n      this.__ce__ = new Event(('@DOMMap:' + counter) + Math.random());\n    }\n\n    DOMMap.prototype = {\n      'constructor': DOMMap,\n      'delete': function del(key) {\n        return dispatch(key, this.__ce__, true), dispatched;\n      },\n      'get': function get(key) {\n        dispatch(key, this.__ce__, false);\n        var v = value;\n        value = undefined;\n        return v;\n      },\n      'has': function has(key) {\n        return dispatch(key, this.__ce__, false), dispatched;\n      },\n      'set': function set(key, value) {\n        dispatch(key, this.__ce__, true);\n        key.addEventListener(this.__ce__.type, new Handler(value), false);\n        return this;\n      },\n    };\n\n    return DOMMap;\n\n  }());\n\n  function Dict() {}\n  Dict.prototype = (Object.create || Object)(null);\n\n  // https://dom.spec.whatwg.org/#interface-eventtarget\n\n  function createEventListener(type, callback, options) {\n    function eventListener(e) {\n      if (eventListener.once) {\n        e.currentTarget.removeEventListener(\n          e.type,\n          callback,\n          eventListener\n        );\n        eventListener.removed = true;\n      }\n      if (eventListener.passive) {\n        e.preventDefault = createEventListener.preventDefault;\n      }\n      if (typeof eventListener.callback === 'function') {\n        /* jshint validthis: true */\n        eventListener.callback.call(this, e);\n      } else if (eventListener.callback) {\n        eventListener.callback.handleEvent(e);\n      }\n      if (eventListener.passive) {\n        delete e.preventDefault;\n      }\n    }\n    eventListener.type = type;\n    eventListener.callback = callback;\n    eventListener.capture = !!options.capture;\n    eventListener.passive = !!options.passive;\n    eventListener.once = !!options.once;\n    // currently pointless but specs say to use it, so ...\n    eventListener.removed = false;\n    return eventListener;\n  }\n\n  createEventListener.preventDefault = function preventDefault() {};\n\n  var\n    Event = global.CustomEvent,\n    hOP = Object.prototype.hasOwnProperty,\n    dE = global.dispatchEvent,\n    aEL = global.addEventListener,\n    rEL = global.removeEventListener,\n    counter = 0,\n    increment = function () { counter++; },\n    indexOf = [].indexOf || function indexOf(value){\n      var length = this.length;\n      while(length--) {\n        if (this[length] === value) {\n          break;\n        }\n      }\n      return length;\n    },\n    getListenerKey = function (options) {\n      return ''.concat(\n        options.capture ? '1' : '0',\n        options.passive ? '1' : '0',\n        options.once ? '1' : '0'\n      );\n    },\n    augment, proto\n  ;\n\n  try {\n    aEL('_', increment, {once: true});\n    dE(new Event('_'));\n    dE(new Event('_'));\n    rEL('_', increment, {once: true});\n  } catch(o_O) {}\n\n  if (counter !== 1) {\n    (function () {\n      var dm = new DOMMap();\n      function createAEL(aEL) {\n        return function addEventListener(type, handler, options) {\n          if (options && typeof options !== 'boolean') {\n            var\n              info = dm.get(this),\n              key = getListenerKey(options),\n              i, tmp, wrap\n            ;\n            if (!info) dm.set(this, (info = new Dict()));\n            if (!(type in info)) info[type] = {\n              handler: [],\n              wrap: []\n            };\n            tmp = info[type];\n            i = indexOf.call(tmp.handler, handler);\n            if (i < 0) {\n              i = tmp.handler.push(handler) - 1;\n              tmp.wrap[i] = (wrap = new Dict());\n            } else {\n              wrap = tmp.wrap[i];\n            }\n            if (!(key in wrap)) {\n              wrap[key] = createEventListener(type, handler, options);\n              aEL.call(this, type, wrap[key], wrap[key].capture);\n            }\n          } else {\n            aEL.call(this, type, handler, options);\n          }\n        };\n      }\n      function createREL(rEL) {\n        return function removeEventListener(type, handler, options) {\n          if (options && typeof options !== 'boolean') {\n            var\n              info = dm.get(this),\n              key, i, tmp, wrap\n            ;\n            if (info && (type in info)) {\n              tmp = info[type];\n              i = indexOf.call(tmp.handler, handler);\n              if (-1 < i) {\n                key = getListenerKey(options);\n                wrap = tmp.wrap[i];\n                if (key in wrap) {\n                  rEL.call(this, type, wrap[key], wrap[key].capture);\n                  delete wrap[key];\n                  // return if there are other wraps\n                  for (key in wrap) return;\n                  // otherwise remove all the things\n                  tmp.handler.splice(i, 1);\n                  tmp.wrap.splice(i, 1);\n                  // if there are no other handlers\n                  if (tmp.handler.length === 0)\n                    // drop the info[type] entirely\n                    delete info[type];\n                }\n              }\n            }\n          } else {\n            rEL.call(this, type, handler, options);\n          }\n        };\n      }\n\n      augment = function (Constructor) {\n        if (!Constructor) return;\n        var proto = Constructor.prototype;\n        proto.addEventListener = createAEL(proto.addEventListener);\n        proto.removeEventListener = createREL(proto.removeEventListener);\n      };\n\n      if (global.EventTarget) {\n        augment(EventTarget);\n      } else {\n        augment(global.Text);\n        augment(global.Element || global.HTMLElement);\n        augment(global.HTMLDocument);\n        augment(global.Window || {prototype:global});\n        augment(global.XMLHttpRequest);\n      }\n\n    }());\n  }\n\n}(self));\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/*!\n  * domready (c) Dustin Diaz 2014 - License MIT\n  */\n!function (name, definition) {\n\n  if (true) module.exports = definition()\n  else if (typeof define == 'function' && typeof define.amd == 'object') define(definition)\n  else this[name] = definition()\n\n}('domready', function () {\n\n  var fns = [], listener\n    , doc = document\n    , hack = doc.documentElement.doScroll\n    , domContentLoaded = 'DOMContentLoaded'\n    , loaded = (hack ? /^loaded|^c/ : /^loaded|^i|^c/).test(doc.readyState)\n\n\n  if (!loaded)\n  doc.addEventListener(domContentLoaded, listener = function () {\n    doc.removeEventListener(domContentLoaded, listener)\n    loaded = 1\n    while (listener = fns.shift()) listener()\n  })\n\n  return function (fn) {\n    loaded ? setTimeout(fn, 0) : fns.push(fn)\n  }\n\n});\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\n/*!\n * @copyright Copyright (c) 2016 IcoMoon.io\n * @license   Licensed under MIT license\n *            See https://github.com/Keyamoon/svgxuse\n * @version   1.1.23\n */\n/*jslint browser: true */\n/*global XDomainRequest, MutationObserver, window */\n(function () {\n    'use strict';\n    if (window && window.addEventListener) {\n        var cache = Object.create(null); // holds xhr objects to prevent multiple requests\n        var checkUseElems;\n        var tid; // timeout id\n        var debouncedCheck = function () {\n            clearTimeout(tid);\n            tid = setTimeout(checkUseElems, 100);\n        };\n        var unobserveChanges = function () {\n            return;\n        };\n        var observeChanges = function () {\n            var observer;\n            window.addEventListener('resize', debouncedCheck, false);\n            window.addEventListener('orientationchange', debouncedCheck, false);\n            if (window.MutationObserver) {\n                observer = new MutationObserver(debouncedCheck);\n                observer.observe(document.documentElement, {\n                    childList: true,\n                    subtree: true,\n                    attributes: true\n                });\n                unobserveChanges = function () {\n                    try {\n                        observer.disconnect();\n                        window.removeEventListener('resize', debouncedCheck, false);\n                        window.removeEventListener('orientationchange', debouncedCheck, false);\n                    } catch (ignore) {}\n                };\n            } else {\n                document.documentElement.addEventListener('DOMSubtreeModified', debouncedCheck, false);\n                unobserveChanges = function () {\n                    document.documentElement.removeEventListener('DOMSubtreeModified', debouncedCheck, false);\n                    window.removeEventListener('resize', debouncedCheck, false);\n                    window.removeEventListener('orientationchange', debouncedCheck, false);\n                };\n            }\n        };\n        var createRequest = function (url) {\n            // In IE 9, cross origin requests can only be sent using XDomainRequest.\n            // XDomainRequest would fail if CORS headers are not set.\n            // Therefore, XDomainRequest should only be used with cross origin requests.\n            function getOrigin(loc) {\n                var a;\n                if (loc.protocol !== undefined) {\n                    a = loc;\n                } else {\n                    a = document.createElement('a');\n                    a.href = loc;\n                }\n                return a.protocol.replace(/:/g, '') + a.host;\n            }\n            var Request;\n            var origin;\n            var origin2;\n            if (window.XMLHttpRequest) {\n                Request = new XMLHttpRequest();\n                origin = getOrigin(location);\n                origin2 = getOrigin(url);\n                if (Request.withCredentials === undefined && origin2 !== '' && origin2 !== origin) {\n                    Request = XDomainRequest || undefined;\n                } else {\n                    Request = XMLHttpRequest;\n                }\n            }\n            return Request;\n        };\n        var xlinkNS = 'http://www.w3.org/1999/xlink';\n        checkUseElems = function () {\n            var base;\n            var bcr;\n            var fallback = ''; // optional fallback URL in case no base path to SVG file was given and no symbol definition was found.\n            var hash;\n            var href;\n            var i;\n            var inProgressCount = 0;\n            var isHidden;\n            var Request;\n            var url;\n            var uses;\n            var xhr;\n            function observeIfDone() {\n                // If done with making changes, start watching for chagnes in DOM again\n                inProgressCount -= 1;\n                if (inProgressCount === 0) { // if all xhrs were resolved\n                    unobserveChanges(); // make sure to remove old handlers\n                    observeChanges(); // watch for changes to DOM\n                }\n            }\n            function attrUpdateFunc(spec) {\n                return function () {\n                    if (cache[spec.base] !== true) {\n                        spec.useEl.setAttributeNS(xlinkNS, 'xlink:href', '#' + spec.hash);\n                    }\n                };\n            }\n            function onloadFunc(xhr) {\n                return function () {\n                    var body = document.body;\n                    var x = document.createElement('x');\n                    var svg;\n                    xhr.onload = null;\n                    x.innerHTML = xhr.responseText;\n                    svg = x.getElementsByTagName('svg')[0];\n                    if (svg) {\n                        svg.setAttribute('aria-hidden', 'true');\n                        svg.style.position = 'absolute';\n                        svg.style.width = 0;\n                        svg.style.height = 0;\n                        svg.style.overflow = 'hidden';\n                        body.insertBefore(svg, body.firstChild);\n                    }\n                    observeIfDone();\n                };\n            }\n            function onErrorTimeout(xhr) {\n                return function () {\n                    xhr.onerror = null;\n                    xhr.ontimeout = null;\n                    observeIfDone();\n                };\n            }\n            unobserveChanges(); // stop watching for changes to DOM\n            // find all use elements\n            uses = document.getElementsByTagName('use');\n            for (i = 0; i < uses.length; i += 1) {\n                try {\n                    bcr = uses[i].getBoundingClientRect();\n                } catch (ignore) {\n                    // failed to get bounding rectangle of the use element\n                    bcr = false;\n                }\n                href = uses[i].getAttributeNS(xlinkNS, 'href');\n                if (href && href.split) {\n                    url = href.split('#');\n                } else {\n                    url = [\"\", \"\"];\n                }\n                base = url[0];\n                hash = url[1];\n                isHidden = bcr && bcr.left === 0 && bcr.right === 0 && bcr.top === 0 && bcr.bottom === 0;\n                if (bcr && bcr.width === 0 && bcr.height === 0 && !isHidden) {\n                    // the use element is empty\n                    // if there is a reference to an external SVG, try to fetch it\n                    // use the optional fallback URL if there is no reference to an external SVG\n                    if (fallback && !base.length && hash && !document.getElementById(hash)) {\n                        base = fallback;\n                    }\n                    if (base.length) {\n                        // schedule updating xlink:href\n                        xhr = cache[base];\n                        if (xhr !== true) {\n                            // true signifies that prepending the SVG was not required\n                            setTimeout(attrUpdateFunc({\n                                useEl: uses[i],\n                                base: base,\n                                hash: hash\n                            }), 0);\n                        }\n                        if (xhr === undefined) {\n                            Request = createRequest(base);\n                            if (Request !== undefined) {\n                                xhr = new Request();\n                                cache[base] = xhr;\n                                xhr.onload = onloadFunc(xhr);\n                                xhr.onerror = onErrorTimeout(xhr);\n                                xhr.ontimeout = onErrorTimeout(xhr);\n                                xhr.open('GET', base);\n                                xhr.send();\n                                inProgressCount += 1;\n                            }\n                        }\n                    }\n                } else {\n                    if (!isHidden) {\n                        if (cache[base] === undefined) {\n                            // remember this URL if the use element was not empty and no request was sent\n                            cache[base] = true;\n                        } else if (cache[base].onload) {\n                            // if it turns out that prepending the SVG is not necessary,\n                            // abort the in-progress xhr.\n                            cache[base].abort();\n                            delete cache[base].onload;\n                            cache[base] = true;\n                        }\n                    } else if (base.length && cache[base]) {\n                        attrUpdateFunc({\n                            useEl: uses[i],\n                            base: base,\n                            hash: hash\n                        })();\n                    }\n                }\n            }\n            uses = '';\n            inProgressCount += 1;\n            observeIfDone();\n        };\n        // The load event fires when all resources have finished loading, which allows detecting whether SVG use elements are empty.\n        window.addEventListener('load', function winLoad() {\n            window.removeEventListener('load', winLoad, false); // to prevent memory leaks\n            tid = setTimeout(checkUseElems, 0);\n        }, false);\n    }\n}());\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(0);\nmodule.exports = __webpack_require__(1);\n\n\n/***/ }),\n/* 7 */,\n/* 8 */,\n/* 9 */,\n/* 10 */,\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nexports.onPan = onPan;\nexports.onDrag = onDrag;\nexports.onDrop = onDrop;\n\nvar _hammerjs = __webpack_require__(12);\n\nvar _hammerjs2 = _interopRequireDefault(_hammerjs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar area = document.querySelector('#pricing .wrapper'),\n    tar = document.querySelector('#pricing .wrapper .flex_box');\n\nvar range = getPlanRange();\n\nfunction getPlanRange() {\n\tvar total = 0;\n\tdocument.querySelectorAll('#pricing .plan').forEach(function (item) {\n\t\tvar style = item.currentStyle || window.getComputedStyle(item),\n\t\t    width = item.offsetWidth,\n\t\t    margin = parseFloat(style.marginLeft) + parseFloat(style.marginRight);\n\t\ttotal = total + width + margin;\n\t});\n\n\treturn total - area.offsetWidth;\n}\n\nfunction getNextX(now, move) {\n\tvar next = now + move / 8;\n\n\tif (next >= 0) return 0;else if (next < -range) {\n\t\treturn -range;\n\t} else return next;\n}\n\nwindow.addEventListener(\"resize\", function () {\n\tif (area.offsetWidth > 768) {\n\t\ttar.style.transform = 'translateX(0px)';\n\t}\n\n\trange = getPlanRange();\n\tconsole.log(range);\n});\n\nfunction onPan(event) {\n\tvar hammertime = new _hammerjs2.default(area);\n\tvar nowX = 0;\n\n\thammertime.on('panleft panright', function (ev) {\n\t\tif (area.offsetWidth <= 768) {\n\t\t\tnowX = getNextX(nowX, ev.deltaX);\n\t\t\ttar.style.transform = 'translateX(' + nowX + 'px)';\n\t\t} else {\n\t\t\tnowX = 0;\n\t\t\treturn false;\n\t\t}\n\t});\n}\n\nfunction onDrag(event) {\n\tarea.classList.add('grabbing');\n}\nfunction onDrop(event) {\n\tarea.classList.remove('grabbing');\n}\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n        return Hammer;\n    }.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// bundle.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 00e391844221a0d756a6","import 'dom4'\nimport 'svgxuse'\nimport domready from 'domready'\n\nimport {menuSwitch, menuScroll} from '../navbar'\nimport {onPan, onDrag, onDrop} from '../sec_pricing'\n\ndomready(() => {\n\tconst menuBtn = document.querySelector('.menu_switch')\n\tconst menuItem = document.querySelectorAll('nav a')\n\n\tmenuBtn.addEventListener('click', menuSwitch)\n\tmenuItem.forEach((item)=>{ item.addEventListener('click', menuScroll) })\n\n\t//bind Pan event for Price plan\n\tconst pricePlan = document.querySelector('#pricing .wrapper')\n\tpricePlan.addEventListener('mousedown', onDrag)\n\tpricePlan.addEventListener('mouseup', onDrop)\n\tonPan()\n\n\n})\n\n\n\n// WEBPACK FOOTER //\n// ./components/app/index.js","const html = document.querySelector(\"html\");\n\nfunction hasClass(element, cls) {\n  return (' ' + element.className + ' ').indexOf(' ' + cls + ' ') > -1;\n}\n\n\nexport function menuSwitch( event ) {\n  (hasClass(html, 'menu_open'))?html.classList.remove(\"menu_open\"):html.classList.add(\"menu_open\");\n}\n\nexport function menuScroll( event ) {\n  menuSwitch();\n  // try to add smooth scroll event\n}\nexport function outMenuClick( event ) {\n  menuSwitch();\n}\n\n\n\n// WEBPACK FOOTER //\n// ./components/navbar/index.js","/*!\nCopyright (C) 2013-2015 by Andrea Giammarchi - @WebReflection\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n(function(window){'use strict';\n  /* jshint loopfunc: true, noempty: false*/\n  // http://www.w3.org/TR/dom/#element\n\n  function createDocumentFragment() {\n    return document.createDocumentFragment();\n  }\n\n  function createElement(nodeName) {\n    return document.createElement(nodeName);\n  }\n\n  function enoughArguments(length, name) {\n    if (!length) throw new Error(\n      'Failed to construct ' +\n        name +\n      ': 1 argument required, but only 0 present.'\n    );\n  }\n\n  function mutationMacro(nodes) {\n    if (nodes.length === 1) {\n      return textNodeIfString(nodes[0]);\n    }\n    for (var\n      fragment = createDocumentFragment(),\n      list = slice.call(nodes),\n      i = 0; i < nodes.length; i++\n    ) {\n      fragment.appendChild(textNodeIfString(list[i]));\n    }\n    return fragment;\n  }\n\n  function textNodeIfString(node) {\n    return typeof node === 'string' ? document.createTextNode(node) : node;\n  }\n\n  for(var\n    head,\n    property,\n    TemporaryPrototype,\n    TemporaryTokenList,\n    wrapVerifyToken,\n    document = window.document,\n    hOP = Object.prototype.hasOwnProperty,\n    defineProperty = Object.defineProperty || function (object, property, descriptor) {\n      if (hOP.call(descriptor, 'value')) {\n        object[property] = descriptor.value;\n      } else {\n        if (hOP.call(descriptor, 'get'))\n          object.__defineGetter__(property, descriptor.get);\n        if (hOP.call(descriptor, 'set'))\n          object.__defineSetter__(property, descriptor.set);\n      }\n      return object;\n    },\n    indexOf = [].indexOf || function indexOf(value){\n      var length = this.length;\n      while(length--) {\n        if (this[length] === value) {\n          break;\n        }\n      }\n      return length;\n    },\n    // http://www.w3.org/TR/domcore/#domtokenlist\n    verifyToken = function (token) {\n      if (!token) {\n        throw 'SyntaxError';\n      } else if (spaces.test(token)) {\n        throw 'InvalidCharacterError';\n      }\n      return token;\n    },\n    DOMTokenList = function (node) {\n      var\n        noClassName = typeof node.className === 'undefined',\n        className = noClassName ?\n          (node.getAttribute('class') || '') : node.className,\n        isSVG = noClassName || typeof className === 'object',\n        value = (isSVG ?\n          (noClassName ? className : className.baseVal) :\n          className\n        ).replace(trim, '')\n      ;\n      if (value.length) {\n        properties.push.apply(\n          this,\n          value.split(spaces)\n        );\n      }\n      this._isSVG = isSVG;\n      this._ = node;\n    },\n    classListDescriptor = {\n      get: function get() {\n        return new DOMTokenList(this);\n      },\n      set: function(){}\n    },\n    uid = 'dom4-tmp-'.concat(Math.random() * +new Date()).replace('.','-'),\n    trim = /^\\s+|\\s+$/g,\n    spaces = /\\s+/,\n    SPACE = '\\x20',\n    CLASS_LIST = 'classList',\n    toggle = function toggle(token, force) {\n      if (this.contains(token)) {\n        if (!force) {\n          // force is not true (either false or omitted)\n          this.remove(token);\n        }\n      } else if(force === undefined || force) {\n        force = true;\n        this.add(token);\n      }\n      return !!force;\n    },\n    DocumentFragmentPrototype = window.DocumentFragment && DocumentFragment.prototype,\n    Node = window.Node,\n    NodePrototype = (Node || Element).prototype,\n    CharacterData = window.CharacterData || Node,\n    CharacterDataPrototype = CharacterData && CharacterData.prototype,\n    DocumentType = window.DocumentType,\n    DocumentTypePrototype = DocumentType && DocumentType.prototype,\n    ElementPrototype = (window.Element || Node || window.HTMLElement).prototype,\n    HTMLSelectElement = window.HTMLSelectElement || createElement('select').constructor,\n    selectRemove = HTMLSelectElement.prototype.remove,\n    ShadowRoot = window.ShadowRoot,\n    SVGElement = window.SVGElement,\n    // normalizes multiple ids as CSS query\n    idSpaceFinder = / /g,\n    idSpaceReplacer = '\\\\ ',\n    createQueryMethod = function (methodName) {\n      var createArray = methodName === 'querySelectorAll';\n      return function (css) {\n        var a, i, id, query, nl, selectors, node = this.parentNode;\n        if (node) {\n          for (\n            id = this.getAttribute('id') || uid,\n            query = id === uid ? id : id.replace(idSpaceFinder, idSpaceReplacer),\n            selectors = css.split(','),\n            i = 0; i < selectors.length; i++\n          ) {\n            selectors[i] = '#' + query + ' ' + selectors[i];\n          }\n          css = selectors.join(',');\n        }\n        if (id === uid) this.setAttribute('id', id);\n        nl = (node || this)[methodName](css);\n        if (id === uid) this.removeAttribute('id');\n        // return a list\n        if (createArray) {\n          i = nl.length;\n          a = new Array(i);\n          while (i--) a[i] = nl[i];\n        }\n        // return node or null\n        else {\n          a = nl;\n        }\n        return a;\n      };\n    },\n    addQueryAndAll = function (where) {\n      if (!('query' in where)) {\n        where.query = ElementPrototype.query;\n      }\n      if (!('queryAll' in where)) {\n        where.queryAll = ElementPrototype.queryAll;\n      }\n    },\n    properties = [\n      'matches', (\n        ElementPrototype.matchesSelector ||\n        ElementPrototype.webkitMatchesSelector ||\n        ElementPrototype.khtmlMatchesSelector ||\n        ElementPrototype.mozMatchesSelector ||\n        ElementPrototype.msMatchesSelector ||\n        ElementPrototype.oMatchesSelector ||\n        function matches(selector) {\n          var parentNode = this.parentNode;\n          return !!parentNode && -1 < indexOf.call(\n            parentNode.querySelectorAll(selector),\n            this\n          );\n        }\n      ),\n      'closest', function closest(selector) {\n        var parentNode = this, matches;\n        while (\n          // document has no .matches\n          (matches = parentNode && parentNode.matches) &&\n          !parentNode.matches(selector)\n        ) {\n          parentNode = parentNode.parentNode;\n        }\n        return matches ? parentNode : null;\n      },\n      'prepend', function prepend() {\n        var firstChild = this.firstChild,\n            node = mutationMacro(arguments);\n        if (firstChild) {\n          this.insertBefore(node, firstChild);\n        } else {\n          this.appendChild(node);\n        }\n      },\n      'append', function append() {\n        this.appendChild(mutationMacro(arguments));\n      },\n      'before', function before() {\n        var parentNode = this.parentNode;\n        if (parentNode) {\n          parentNode.insertBefore(\n            mutationMacro(arguments), this\n          );\n        }\n      },\n      'after', function after() {\n        var parentNode = this.parentNode,\n            nextSibling = this.nextSibling,\n            node = mutationMacro(arguments);\n        if (parentNode) {\n          if (nextSibling) {\n            parentNode.insertBefore(node, nextSibling);\n          } else {\n            parentNode.appendChild(node);\n          }\n        }\n      },\n      // WARNING - DEPRECATED - use .replaceWith() instead\n      'replace', function replace() {\n        this.replaceWith.apply(this, arguments);\n      },\n      'replaceWith', function replaceWith() {\n        var parentNode = this.parentNode;\n        if (parentNode) {\n          parentNode.replaceChild(\n            mutationMacro(arguments),\n            this\n          );\n        }\n      },\n      'remove', function remove() {\n        var parentNode = this.parentNode;\n        if (parentNode) {\n          parentNode.removeChild(this);\n        }\n      },\n      'query', createQueryMethod('querySelector'),\n      'queryAll', createQueryMethod('querySelectorAll')\n    ],\n    slice = properties.slice,\n    i = properties.length; i; i -= 2\n  ) {\n    property = properties[i - 2];\n    if (!(property in ElementPrototype)) {\n      ElementPrototype[property] = properties[i - 1];\n    }\n    if (property === 'remove') {\n      // see https://github.com/WebReflection/dom4/issues/19\n      HTMLSelectElement.prototype[property] = function () {\n        return 0 < arguments.length ?\n          selectRemove.apply(this, arguments) :\n          ElementPrototype.remove.call(this);\n      };\n    }\n    // see https://github.com/WebReflection/dom4/issues/18\n    if (/^(?:before|after|replace|replaceWith|remove)$/.test(property)) {\n      if (CharacterData && !(property in CharacterDataPrototype)) {\n        CharacterDataPrototype[property] = properties[i - 1];\n      }\n      if (DocumentType && !(property in DocumentTypePrototype)) {\n        DocumentTypePrototype[property] = properties[i - 1];\n      }\n    }\n    // see https://github.com/WebReflection/dom4/pull/26\n    if (/^(?:append|prepend)$/.test(property)) {\n      if (DocumentFragmentPrototype) {\n        if (!(property in DocumentFragmentPrototype)) {\n          DocumentFragmentPrototype[property] = properties[i - 1];\n        }\n      } else {\n        try {\n          createDocumentFragment().constructor.prototype[property] = properties[i - 1];\n        } catch(o_O) {}\n      }\n    }\n  }\n\n  // bring query and queryAll to the document too\n  addQueryAndAll(document);\n\n  // brings query and queryAll to fragments as well\n  if (DocumentFragmentPrototype) {\n    addQueryAndAll(DocumentFragmentPrototype);\n  } else {\n    try {\n      addQueryAndAll(createDocumentFragment().constructor.prototype);\n    } catch(o_O) {}\n  }\n\n  // bring query and queryAll to the ShadowRoot too\n  if (ShadowRoot) {\n    addQueryAndAll(ShadowRoot.prototype);\n  }\n\n  // most likely an IE9 only issue\n  // see https://github.com/WebReflection/dom4/issues/6\n  if (!createElement('a').matches('a')) {\n    ElementPrototype[property] = function(matches){\n      return function (selector) {\n        return matches.call(\n          this.parentNode ?\n            this :\n            createDocumentFragment().appendChild(this),\n          selector\n        );\n      };\n    }(ElementPrototype[property]);\n  }\n\n  // used to fix both old webkit and SVG\n  DOMTokenList.prototype = {\n    length: 0,\n    add: function add() {\n      for(var j = 0, token; j < arguments.length; j++) {\n        token = arguments[j];\n        if(!this.contains(token)) {\n          properties.push.call(this, property);\n        }\n      }\n      if (this._isSVG) {\n        this._.setAttribute('class', '' + this);\n      } else {\n        this._.className = '' + this;\n      }\n    },\n    contains: (function(indexOf){\n      return function contains(token) {\n        i = indexOf.call(this, property = verifyToken(token));\n        return -1 < i;\n      };\n    }([].indexOf || function (token) {\n      i = this.length;\n      while(i-- && this[i] !== token){}\n      return i;\n    })),\n    item: function item(i) {\n      return this[i] || null;\n    },\n    remove: function remove() {\n      for(var j = 0, token; j < arguments.length; j++) {\n        token = arguments[j];\n        if(this.contains(token)) {\n          properties.splice.call(this, i, 1);\n        }\n      }\n      if (this._isSVG) {\n        this._.setAttribute('class', '' + this);\n      } else {\n        this._.className = '' + this;\n      }\n    },\n    toggle: toggle,\n    toString: function toString() {\n      return properties.join.call(this, SPACE);\n    }\n  };\n\n  if (SVGElement && !(CLASS_LIST in SVGElement.prototype)) {\n    defineProperty(SVGElement.prototype, CLASS_LIST, classListDescriptor);\n  }\n\n  // http://www.w3.org/TR/dom/#domtokenlist\n  // iOS 5.1 has completely screwed this property\n  // classList in ElementPrototype is false\n  // but it's actually there as getter\n  if (!(CLASS_LIST in document.documentElement)) {\n    defineProperty(ElementPrototype, CLASS_LIST, classListDescriptor);\n  } else {\n    // iOS 5.1 and Nokia ASHA do not support multiple add or remove\n    // trying to detect and fix that in here\n    TemporaryTokenList = createElement('div')[CLASS_LIST];\n    TemporaryTokenList.add('a', 'b', 'a');\n    if ('a\\x20b' != TemporaryTokenList) {\n      // no other way to reach original methods in iOS 5.1\n      TemporaryPrototype = TemporaryTokenList.constructor.prototype;\n      if (!('add' in TemporaryPrototype)) {\n        // ASHA double fails in here\n        TemporaryPrototype = window.TemporaryTokenList.prototype;\n      }\n      wrapVerifyToken = function (original) {\n        return function () {\n          var i = 0;\n          while (i < arguments.length) {\n            original.call(this, arguments[i++]);\n          }\n        };\n      };\n      TemporaryPrototype.add = wrapVerifyToken(TemporaryPrototype.add);\n      TemporaryPrototype.remove = wrapVerifyToken(TemporaryPrototype.remove);\n      // toggle is broken too ^_^ ... let's fix it\n      TemporaryPrototype.toggle = toggle;\n    }\n  }\n\n  if (!('contains' in NodePrototype)) {\n    defineProperty(NodePrototype, 'contains', {\n      value: function (el) {\n        while (el && el !== this) el = el.parentNode;\n        return this === el;\n      }\n    });\n  }\n\n  if (!('head' in document)) {\n    defineProperty(document, 'head', {\n      get: function () {\n        return head || (\n          head = document.getElementsByTagName('head')[0]\n        );\n      }\n    });\n  }\n\n  // requestAnimationFrame partial polyfill\n  (function () {\n    for (var\n      raf,\n      rAF = window.requestAnimationFrame,\n      cAF = window.cancelAnimationFrame,\n      prefixes = ['o', 'ms', 'moz', 'webkit'],\n      i = prefixes.length;\n      !cAF && i--;\n    ) {\n      rAF = rAF || window[prefixes[i] + 'RequestAnimationFrame'];\n      cAF = window[prefixes[i] + 'CancelAnimationFrame'] ||\n            window[prefixes[i] + 'CancelRequestAnimationFrame'];\n    }\n    if (!cAF) {\n      // some FF apparently implemented rAF but no cAF \n      if (rAF) {\n        raf = rAF;\n        rAF = function (callback) {\n          var goOn = true;\n          raf(function () {\n            if (goOn) callback.apply(this, arguments);\n          });\n          return function () {\n            goOn = false;\n          };\n        };\n        cAF = function (id) {\n          id();\n        };\n      } else {\n        rAF = function (callback) {\n          return setTimeout(callback, 15, 15);\n        };\n        cAF = function (id) {\n          clearTimeout(id);\n        };\n      }\n    }\n    window.requestAnimationFrame = rAF;\n    window.cancelAnimationFrame = cAF;\n  }());\n\n  // http://www.w3.org/TR/dom/#customevent\n  try{new window.CustomEvent('?');}catch(o_O){\n    window.CustomEvent = function(\n      eventName,\n      defaultInitDict\n    ){\n\n      // the infamous substitute\n      function CustomEvent(type, eventInitDict) {\n        /*jshint eqnull:true */\n        var event = document.createEvent(eventName);\n        if (typeof type != 'string') {\n          throw new Error('An event name must be provided');\n        }\n        if (eventName == 'Event') {\n          event.initCustomEvent = initCustomEvent;\n        }\n        if (eventInitDict == null) {\n          eventInitDict = defaultInitDict;\n        }\n        event.initCustomEvent(\n          type,\n          eventInitDict.bubbles,\n          eventInitDict.cancelable,\n          eventInitDict.detail\n        );\n        return event;\n      }\n\n      // attached at runtime\n      function initCustomEvent(\n        type, bubbles, cancelable, detail\n      ) {\n        /*jshint validthis:true*/\n        this.initEvent(type, bubbles, cancelable);\n        this.detail = detail;\n      }\n\n      // that's it\n      return CustomEvent;\n    }(\n      // is this IE9 or IE10 ?\n      // where CustomEvent is there\n      // but not usable as construtor ?\n      window.CustomEvent ?\n        // use the CustomEvent interface in such case\n        'CustomEvent' : 'Event',\n        // otherwise the common compatible one\n      {\n        bubbles: false,\n        cancelable: false,\n        detail: null\n      }\n    );\n  }\n\n  // window.Event as constructor\n  try { new Event('_'); } catch (o_O) {\n    /* jshint -W022 */\n    o_O = (function ($Event) {\n      function Event(type, init) {\n        enoughArguments(arguments.length, 'Event');\n        var out = document.createEvent('Event');\n        if (!init) init = {};\n        out.initEvent(\n          type,\n          !!init.bubbles,\n          !!init.cancelable\n        );\n        return out;\n      }\n      Event.prototype = $Event.prototype;\n      return Event;\n    }(window.Event || function Event() {}));\n    defineProperty(window, 'Event', {value: o_O});\n    // Android 4 gotcha\n    if (Event !== o_O) Event = o_O;\n  }\n\n  // window.KeyboardEvent as constructor\n  try { new KeyboardEvent('_', {}); } catch (o_O) {\n    /* jshint -W022 */\n    o_O = (function ($KeyboardEvent) {\n      // code inspired by https://gist.github.com/termi/4654819\n      var\n        initType = 0,\n        defaults = {\n          char: '',\n          key: '',\n          location: 0,\n          ctrlKey: false,\n          shiftKey: false,\n          altKey: false,\n          metaKey: false,\n          altGraphKey: false,\n          repeat: false,\n          locale: navigator.language,\n          detail: 0,\n          bubbles: false,\n          cancelable: false,\n          keyCode: 0,\n          charCode: 0,\n          which: 0\n        },\n        eventType\n      ;\n      try {\n        var e = document.createEvent('KeyboardEvent');\n        e.initKeyboardEvent(\n          'keyup', false, false, window, '+', 3,\n          true, false, true, false, false\n        );\n        initType = (\n          (e.keyIdentifier || e.key) == '+' &&\n          (e.keyLocation || e.location) == 3\n        ) && (\n          e.ctrlKey ? e.altKey ? 1 : 3 : e.shiftKey ? 2 : 4\n        ) || 9;\n      } catch(o_O) {}\n      eventType = 0 < initType ? 'KeyboardEvent' : 'Event';\n\n      function getModifier(init) {\n        for (var\n          out = [],\n          keys = [\n            'ctrlKey',\n            'Control',\n            'shiftKey',\n            'Shift',\n            'altKey',\n            'Alt',\n            'metaKey',\n            'Meta',\n            'altGraphKey',\n            'AltGraph'\n          ],\n          i = 0; i < keys.length; i += 2\n        ) {\n          if (init[keys[i]])\n            out.push(keys[i + 1]);\n        }\n        return out.join(' ');\n      }\n\n      function withDefaults(target, source) {\n        for (var key in source) {\n          if (\n            source.hasOwnProperty(key) &&\n            !source.hasOwnProperty.call(target, key)\n          ) target[key] = source[key];\n        }\n        return target;\n      }\n\n      function withInitValues(key, out, init) {\n        try {\n          out[key] = init[key];\n        } catch(o_O) {}\n      }\n\n      function KeyboardEvent(type, init) {\n        enoughArguments(arguments.length, 'KeyboardEvent');\n        init = withDefaults(init || {}, defaults);\n        var\n          out = document.createEvent(eventType),\n          ctrlKey = init.ctrlKey,\n          shiftKey = init.shiftKey,\n          altKey = init.altKey,\n          metaKey = init.metaKey,\n          altGraphKey = init.altGraphKey,\n          modifiers = initType > 3 ? getModifier(init) : null,\n          key = String(init.key),\n          chr = String(init.char),\n          location = init.location,\n          keyCode = init.keyCode || (\n            (init.keyCode = key) &&\n            key.charCodeAt(0)\n          ) || 0,\n          charCode = init.charCode || (\n            (init.charCode = chr) &&\n            chr.charCodeAt(0)\n          ) || 0,\n          bubbles = init.bubbles,\n          cancelable = init.cancelable,\n          repeat = init.repeat,\n          locale = init.locale,\n          view = init.view || window,\n          args\n        ;\n        if (!init.which) init.which = init.keyCode;\n        if ('initKeyEvent' in out) {\n          out.initKeyEvent(\n            type, bubbles, cancelable, view,\n            ctrlKey, altKey, shiftKey, metaKey, keyCode, charCode\n          );\n        } else if (0 < initType && 'initKeyboardEvent' in out) {\n          args = [type, bubbles, cancelable, view];\n          switch (initType) {\n            case 1:\n              args.push(key, location, ctrlKey, shiftKey, altKey, metaKey, altGraphKey);\n              break;\n            case 2:\n              args.push(ctrlKey, altKey, shiftKey, metaKey, keyCode, charCode);\n              break;\n            case 3:\n              args.push(key, location, ctrlKey, altKey, shiftKey, metaKey, altGraphKey);\n              break;\n            case 4:\n              args.push(key, location, modifiers, repeat, locale);\n              break;\n            default:\n              args.push(char, key, location, modifiers, repeat, locale);\n          }\n          out.initKeyboardEvent.apply(out, args);\n        } else {\n          out.initEvent(type, bubbles, cancelable);\n        }\n        for (key in out) {\n          if (defaults.hasOwnProperty(key) && out[key] !== init[key]) {\n            withInitValues(key, out, init);\n          }\n        }\n        return out;\n      }\n      KeyboardEvent.prototype = $KeyboardEvent.prototype;\n      return KeyboardEvent;\n    }(window.KeyboardEvent || function KeyboardEvent() {}));\n    defineProperty(window, 'KeyboardEvent', {value: o_O});\n    // Android 4 gotcha\n    if (KeyboardEvent !== o_O) KeyboardEvent = o_O;\n  }\n\n  // window.MouseEvent as constructor\n  try { new MouseEvent('_', {}); } catch (o_O) {\n    /* jshint -W022 */\n    o_O = (function ($MouseEvent) {\n      function MouseEvent(type, init) {\n        enoughArguments(arguments.length, 'MouseEvent');\n        var out = document.createEvent('MouseEvent');\n        if (!init) init = {};\n        out.initMouseEvent(\n          type,\n          !!init.bubbles,\n          !!init.cancelable,\n          init.view || window,\n          init.detail || 1,\n          init.screenX || 0,\n          init.screenY || 0,\n          init.clientX || 0,\n          init.clientY || 0,\n          !!init.ctrlKey,\n          !!init.altKey,\n          !!init.shiftKey,\n          !!init.metaKey,\n          init.button || 0,\n          init.relatedTarget || null\n        );\n        return out;\n      }\n      MouseEvent.prototype = $MouseEvent.prototype;\n      return MouseEvent;\n    }(window.MouseEvent || function MouseEvent() {}));\n    defineProperty(window, 'MouseEvent', {value: o_O});\n    // Android 4 gotcha\n    if (MouseEvent !== o_O) MouseEvent = o_O;\n  }\n\n}(window));(function (global){'use strict';\n\n  // a WeakMap fallback for DOM nodes only used as key\n  var DOMMap = global.WeakMap || (function () {\n\n    var\n      counter = 0,\n      dispatched = false,\n      drop = false,\n      value\n    ;\n\n    function dispatch(key, ce, shouldDrop) {\n      drop = shouldDrop;\n      dispatched = false;\n      value = undefined;\n      key.dispatchEvent(ce);\n    }\n\n    function Handler(value) {\n      this.value = value;\n    }\n\n    Handler.prototype.handleEvent = function handleEvent(e) {\n      dispatched = true;\n      if (drop) {\n        e.currentTarget.removeEventListener(e.type, this, false);\n      } else {\n        value = this.value;\n      }\n    };\n\n    function DOMMap() {\n      counter++;  // make id clashing highly improbable\n      this.__ce__ = new Event(('@DOMMap:' + counter) + Math.random());\n    }\n\n    DOMMap.prototype = {\n      'constructor': DOMMap,\n      'delete': function del(key) {\n        return dispatch(key, this.__ce__, true), dispatched;\n      },\n      'get': function get(key) {\n        dispatch(key, this.__ce__, false);\n        var v = value;\n        value = undefined;\n        return v;\n      },\n      'has': function has(key) {\n        return dispatch(key, this.__ce__, false), dispatched;\n      },\n      'set': function set(key, value) {\n        dispatch(key, this.__ce__, true);\n        key.addEventListener(this.__ce__.type, new Handler(value), false);\n        return this;\n      },\n    };\n\n    return DOMMap;\n\n  }());\n\n  function Dict() {}\n  Dict.prototype = (Object.create || Object)(null);\n\n  // https://dom.spec.whatwg.org/#interface-eventtarget\n\n  function createEventListener(type, callback, options) {\n    function eventListener(e) {\n      if (eventListener.once) {\n        e.currentTarget.removeEventListener(\n          e.type,\n          callback,\n          eventListener\n        );\n        eventListener.removed = true;\n      }\n      if (eventListener.passive) {\n        e.preventDefault = createEventListener.preventDefault;\n      }\n      if (typeof eventListener.callback === 'function') {\n        /* jshint validthis: true */\n        eventListener.callback.call(this, e);\n      } else if (eventListener.callback) {\n        eventListener.callback.handleEvent(e);\n      }\n      if (eventListener.passive) {\n        delete e.preventDefault;\n      }\n    }\n    eventListener.type = type;\n    eventListener.callback = callback;\n    eventListener.capture = !!options.capture;\n    eventListener.passive = !!options.passive;\n    eventListener.once = !!options.once;\n    // currently pointless but specs say to use it, so ...\n    eventListener.removed = false;\n    return eventListener;\n  }\n\n  createEventListener.preventDefault = function preventDefault() {};\n\n  var\n    Event = global.CustomEvent,\n    hOP = Object.prototype.hasOwnProperty,\n    dE = global.dispatchEvent,\n    aEL = global.addEventListener,\n    rEL = global.removeEventListener,\n    counter = 0,\n    increment = function () { counter++; },\n    indexOf = [].indexOf || function indexOf(value){\n      var length = this.length;\n      while(length--) {\n        if (this[length] === value) {\n          break;\n        }\n      }\n      return length;\n    },\n    getListenerKey = function (options) {\n      return ''.concat(\n        options.capture ? '1' : '0',\n        options.passive ? '1' : '0',\n        options.once ? '1' : '0'\n      );\n    },\n    augment, proto\n  ;\n\n  try {\n    aEL('_', increment, {once: true});\n    dE(new Event('_'));\n    dE(new Event('_'));\n    rEL('_', increment, {once: true});\n  } catch(o_O) {}\n\n  if (counter !== 1) {\n    (function () {\n      var dm = new DOMMap();\n      function createAEL(aEL) {\n        return function addEventListener(type, handler, options) {\n          if (options && typeof options !== 'boolean') {\n            var\n              info = dm.get(this),\n              key = getListenerKey(options),\n              i, tmp, wrap\n            ;\n            if (!info) dm.set(this, (info = new Dict()));\n            if (!(type in info)) info[type] = {\n              handler: [],\n              wrap: []\n            };\n            tmp = info[type];\n            i = indexOf.call(tmp.handler, handler);\n            if (i < 0) {\n              i = tmp.handler.push(handler) - 1;\n              tmp.wrap[i] = (wrap = new Dict());\n            } else {\n              wrap = tmp.wrap[i];\n            }\n            if (!(key in wrap)) {\n              wrap[key] = createEventListener(type, handler, options);\n              aEL.call(this, type, wrap[key], wrap[key].capture);\n            }\n          } else {\n            aEL.call(this, type, handler, options);\n          }\n        };\n      }\n      function createREL(rEL) {\n        return function removeEventListener(type, handler, options) {\n          if (options && typeof options !== 'boolean') {\n            var\n              info = dm.get(this),\n              key, i, tmp, wrap\n            ;\n            if (info && (type in info)) {\n              tmp = info[type];\n              i = indexOf.call(tmp.handler, handler);\n              if (-1 < i) {\n                key = getListenerKey(options);\n                wrap = tmp.wrap[i];\n                if (key in wrap) {\n                  rEL.call(this, type, wrap[key], wrap[key].capture);\n                  delete wrap[key];\n                  // return if there are other wraps\n                  for (key in wrap) return;\n                  // otherwise remove all the things\n                  tmp.handler.splice(i, 1);\n                  tmp.wrap.splice(i, 1);\n                  // if there are no other handlers\n                  if (tmp.handler.length === 0)\n                    // drop the info[type] entirely\n                    delete info[type];\n                }\n              }\n            }\n          } else {\n            rEL.call(this, type, handler, options);\n          }\n        };\n      }\n\n      augment = function (Constructor) {\n        if (!Constructor) return;\n        var proto = Constructor.prototype;\n        proto.addEventListener = createAEL(proto.addEventListener);\n        proto.removeEventListener = createREL(proto.removeEventListener);\n      };\n\n      if (global.EventTarget) {\n        augment(EventTarget);\n      } else {\n        augment(global.Text);\n        augment(global.Element || global.HTMLElement);\n        augment(global.HTMLDocument);\n        augment(global.Window || {prototype:global});\n        augment(global.XMLHttpRequest);\n      }\n\n    }());\n  }\n\n}(self));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/dom4/build/dom4.max.js\n// module id = 3\n// module chunks = 0","/*!\n  * domready (c) Dustin Diaz 2014 - License MIT\n  */\n!function (name, definition) {\n\n  if (typeof module != 'undefined') module.exports = definition()\n  else if (typeof define == 'function' && typeof define.amd == 'object') define(definition)\n  else this[name] = definition()\n\n}('domready', function () {\n\n  var fns = [], listener\n    , doc = document\n    , hack = doc.documentElement.doScroll\n    , domContentLoaded = 'DOMContentLoaded'\n    , loaded = (hack ? /^loaded|^c/ : /^loaded|^i|^c/).test(doc.readyState)\n\n\n  if (!loaded)\n  doc.addEventListener(domContentLoaded, listener = function () {\n    doc.removeEventListener(domContentLoaded, listener)\n    loaded = 1\n    while (listener = fns.shift()) listener()\n  })\n\n  return function (fn) {\n    loaded ? setTimeout(fn, 0) : fns.push(fn)\n  }\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/domready/ready.js\n// module id = 4\n// module chunks = 0","/*!\n * @copyright Copyright (c) 2016 IcoMoon.io\n * @license   Licensed under MIT license\n *            See https://github.com/Keyamoon/svgxuse\n * @version   1.1.23\n */\n/*jslint browser: true */\n/*global XDomainRequest, MutationObserver, window */\n(function () {\n    'use strict';\n    if (window && window.addEventListener) {\n        var cache = Object.create(null); // holds xhr objects to prevent multiple requests\n        var checkUseElems;\n        var tid; // timeout id\n        var debouncedCheck = function () {\n            clearTimeout(tid);\n            tid = setTimeout(checkUseElems, 100);\n        };\n        var unobserveChanges = function () {\n            return;\n        };\n        var observeChanges = function () {\n            var observer;\n            window.addEventListener('resize', debouncedCheck, false);\n            window.addEventListener('orientationchange', debouncedCheck, false);\n            if (window.MutationObserver) {\n                observer = new MutationObserver(debouncedCheck);\n                observer.observe(document.documentElement, {\n                    childList: true,\n                    subtree: true,\n                    attributes: true\n                });\n                unobserveChanges = function () {\n                    try {\n                        observer.disconnect();\n                        window.removeEventListener('resize', debouncedCheck, false);\n                        window.removeEventListener('orientationchange', debouncedCheck, false);\n                    } catch (ignore) {}\n                };\n            } else {\n                document.documentElement.addEventListener('DOMSubtreeModified', debouncedCheck, false);\n                unobserveChanges = function () {\n                    document.documentElement.removeEventListener('DOMSubtreeModified', debouncedCheck, false);\n                    window.removeEventListener('resize', debouncedCheck, false);\n                    window.removeEventListener('orientationchange', debouncedCheck, false);\n                };\n            }\n        };\n        var createRequest = function (url) {\n            // In IE 9, cross origin requests can only be sent using XDomainRequest.\n            // XDomainRequest would fail if CORS headers are not set.\n            // Therefore, XDomainRequest should only be used with cross origin requests.\n            function getOrigin(loc) {\n                var a;\n                if (loc.protocol !== undefined) {\n                    a = loc;\n                } else {\n                    a = document.createElement('a');\n                    a.href = loc;\n                }\n                return a.protocol.replace(/:/g, '') + a.host;\n            }\n            var Request;\n            var origin;\n            var origin2;\n            if (window.XMLHttpRequest) {\n                Request = new XMLHttpRequest();\n                origin = getOrigin(location);\n                origin2 = getOrigin(url);\n                if (Request.withCredentials === undefined && origin2 !== '' && origin2 !== origin) {\n                    Request = XDomainRequest || undefined;\n                } else {\n                    Request = XMLHttpRequest;\n                }\n            }\n            return Request;\n        };\n        var xlinkNS = 'http://www.w3.org/1999/xlink';\n        checkUseElems = function () {\n            var base;\n            var bcr;\n            var fallback = ''; // optional fallback URL in case no base path to SVG file was given and no symbol definition was found.\n            var hash;\n            var href;\n            var i;\n            var inProgressCount = 0;\n            var isHidden;\n            var Request;\n            var url;\n            var uses;\n            var xhr;\n            function observeIfDone() {\n                // If done with making changes, start watching for chagnes in DOM again\n                inProgressCount -= 1;\n                if (inProgressCount === 0) { // if all xhrs were resolved\n                    unobserveChanges(); // make sure to remove old handlers\n                    observeChanges(); // watch for changes to DOM\n                }\n            }\n            function attrUpdateFunc(spec) {\n                return function () {\n                    if (cache[spec.base] !== true) {\n                        spec.useEl.setAttributeNS(xlinkNS, 'xlink:href', '#' + spec.hash);\n                    }\n                };\n            }\n            function onloadFunc(xhr) {\n                return function () {\n                    var body = document.body;\n                    var x = document.createElement('x');\n                    var svg;\n                    xhr.onload = null;\n                    x.innerHTML = xhr.responseText;\n                    svg = x.getElementsByTagName('svg')[0];\n                    if (svg) {\n                        svg.setAttribute('aria-hidden', 'true');\n                        svg.style.position = 'absolute';\n                        svg.style.width = 0;\n                        svg.style.height = 0;\n                        svg.style.overflow = 'hidden';\n                        body.insertBefore(svg, body.firstChild);\n                    }\n                    observeIfDone();\n                };\n            }\n            function onErrorTimeout(xhr) {\n                return function () {\n                    xhr.onerror = null;\n                    xhr.ontimeout = null;\n                    observeIfDone();\n                };\n            }\n            unobserveChanges(); // stop watching for changes to DOM\n            // find all use elements\n            uses = document.getElementsByTagName('use');\n            for (i = 0; i < uses.length; i += 1) {\n                try {\n                    bcr = uses[i].getBoundingClientRect();\n                } catch (ignore) {\n                    // failed to get bounding rectangle of the use element\n                    bcr = false;\n                }\n                href = uses[i].getAttributeNS(xlinkNS, 'href');\n                if (href && href.split) {\n                    url = href.split('#');\n                } else {\n                    url = [\"\", \"\"];\n                }\n                base = url[0];\n                hash = url[1];\n                isHidden = bcr && bcr.left === 0 && bcr.right === 0 && bcr.top === 0 && bcr.bottom === 0;\n                if (bcr && bcr.width === 0 && bcr.height === 0 && !isHidden) {\n                    // the use element is empty\n                    // if there is a reference to an external SVG, try to fetch it\n                    // use the optional fallback URL if there is no reference to an external SVG\n                    if (fallback && !base.length && hash && !document.getElementById(hash)) {\n                        base = fallback;\n                    }\n                    if (base.length) {\n                        // schedule updating xlink:href\n                        xhr = cache[base];\n                        if (xhr !== true) {\n                            // true signifies that prepending the SVG was not required\n                            setTimeout(attrUpdateFunc({\n                                useEl: uses[i],\n                                base: base,\n                                hash: hash\n                            }), 0);\n                        }\n                        if (xhr === undefined) {\n                            Request = createRequest(base);\n                            if (Request !== undefined) {\n                                xhr = new Request();\n                                cache[base] = xhr;\n                                xhr.onload = onloadFunc(xhr);\n                                xhr.onerror = onErrorTimeout(xhr);\n                                xhr.ontimeout = onErrorTimeout(xhr);\n                                xhr.open('GET', base);\n                                xhr.send();\n                                inProgressCount += 1;\n                            }\n                        }\n                    }\n                } else {\n                    if (!isHidden) {\n                        if (cache[base] === undefined) {\n                            // remember this URL if the use element was not empty and no request was sent\n                            cache[base] = true;\n                        } else if (cache[base].onload) {\n                            // if it turns out that prepending the SVG is not necessary,\n                            // abort the in-progress xhr.\n                            cache[base].abort();\n                            delete cache[base].onload;\n                            cache[base] = true;\n                        }\n                    } else if (base.length && cache[base]) {\n                        attrUpdateFunc({\n                            useEl: uses[i],\n                            base: base,\n                            hash: hash\n                        })();\n                    }\n                }\n            }\n            uses = '';\n            inProgressCount += 1;\n            observeIfDone();\n        };\n        // The load event fires when all resources have finished loading, which allows detecting whether SVG use elements are empty.\n        window.addEventListener('load', function winLoad() {\n            window.removeEventListener('load', winLoad, false); // to prevent memory leaks\n            tid = setTimeout(checkUseElems, 0);\n        }, false);\n    }\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/svgxuse/svgxuse.js\n// module id = 5\n// module chunks = 0","import Hammer from 'hammerjs'\n\n\nconst area = document.querySelector('#pricing .wrapper'),\n\t\t\ttar = document.querySelector('#pricing .wrapper .flex_box')\n\nlet range = getPlanRange()\n\nfunction getPlanRange(){\n\tlet total = 0;\n\tdocument.querySelectorAll('#pricing .plan').forEach((item=>{\n\t\t\tconst style = item.currentStyle || window.getComputedStyle(item),\n\t\t\t\t    width = item.offsetWidth,\n\t\t\t\t    margin = parseFloat(style.marginLeft) + parseFloat(style.marginRight);\n\t\t total = total + width + margin\n\t}))\n\n\treturn total - area.offsetWidth\n}\n\nfunction getNextX(now, move) {\n\tconst next = now + move/8\n\n\tif ( next >= 0 )\n\t\treturn 0\n\telse if( next < -range ){\n\t\treturn -range\n\t}\n\telse\n\t\treturn next\n}\n\nwindow.addEventListener(\"resize\", ()=>{\n\tif (area.offsetWidth > 768){\n\t\ttar.style.transform = 'translateX(0px)'\n\t}\n\n\trange = getPlanRange()\n\tconsole.log(range)\n});\n\nexport function onPan( event ) {\n\tconst hammertime = new Hammer(area)\n\tlet\tnowX = 0\n\n\thammertime.on('panleft panright', function(ev) {\n\t\tif (area.offsetWidth <= 768 ) {\n\t\t\tnowX = getNextX( nowX, ev.deltaX )\n\t\t\ttar.style.transform = `translateX(${nowX}px)`\n\t\t}\n\t\telse{\n\t\t\tnowX = 0;\n\t\t\treturn false\n\t\t}\n\t});\n\n}\n\nexport function onDrag( event ) {\n\tarea.classList.add('grabbing');\n}\nexport function onDrop( event ) {\n\tarea.classList.remove('grabbing');\n}\n\n\n// WEBPACK FOOTER //\n// ./components/sec_pricing/index.js","/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/hammerjs/hammer.js\n// module id = 12\n// module chunks = 0"],"sourceRoot":""}